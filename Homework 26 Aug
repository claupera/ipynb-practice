{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "solution2": "hidden",
        "solution2_first": true,
        "id": "9RcIODQ4Ongw"
      },
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "solution2": "hidden",
        "id": "DLCbhlfpOngw"
      },
      "outputs": [],
      "source": [
        "secret_code = 9"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "secret_code = 9\n",
        "mycode = 0\n",
        "while mycode != secret_code:\n",
        "    print (\"start\",mycode)\n",
        "    mycode +=1\n",
        "else:\n",
        "  print (\"the code is\", mycode)"
      ],
      "metadata": {
        "id": "sBddQtMyLF5b",
        "outputId": "b58b6e47-df7a-44c6-d4ff-9063109de280",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "start 0\n",
            "start 1\n",
            "start 2\n",
            "start 3\n",
            "start 4\n",
            "start 5\n",
            "start 6\n",
            "start 7\n",
            "start 8\n",
            "the code is 9\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Fjw9SNCRPOIC",
        "outputId": "c2c5f9d0-37f3-41b6-93a2-280e8621d016",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 211
        }
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "name 'num' is not defined",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-23-15ec593b07b0>\u001b[0m in \u001b[0;36m<cell line: 4>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mwhile\u001b[0m \u001b[0msecret_code\u001b[0m \u001b[0;34m!=\u001b[0m \u001b[0mmycode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m   \u001b[0;32mfor\u001b[0m \u001b[0mnum\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mmycode\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m     \u001b[0mmycode\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m     \u001b[0mprint\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mmycode\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'num' is not defined"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "code = [0,0]"
      ],
      "metadata": {
        "id": "SLhIvAJ5P4EQ"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "code [0] = 1"
      ],
      "metadata": {
        "id": "6Jd7_CetgEyy"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print (code)"
      ],
      "metadata": {
        "id": "-hn7IWBBgKhB",
        "outputId": "649d3692-0e87-4ab8-b732-f77725df8b46",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 0]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "code [0] += 1\n",
        "print (code)"
      ],
      "metadata": {
        "id": "-d0psniHgLwB",
        "outputId": "7781eafd-c070-4128-c738-04d0921ef966",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[3, 0]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "code [0] += 1\n",
        "print (code)"
      ],
      "metadata": {
        "id": "rvgmBA4ggPP7",
        "outputId": "20b1a2b5-d7a9-477a-d616-bb01256c0c6e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[4, 0]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "secret_code = [0,1]\n",
        "mycode = [0,0]\n",
        "\n",
        "while secret_code != mycode:\n",
        "    print(mycode, \"start first\")\n",
        "    mycode [0] +=1\n",
        "    print(mycode, \"end first\")\n",
        "    if mycode [0] == 9:\n",
        "      mycode [0] = 0\n",
        "    mycode [1] +=1\n",
        "    print(mycode,\"end second\")\n",
        "    if mycode [1] == 9:\n",
        "      break\n",
        ""
      ],
      "metadata": {
        "id": "5Vtk_JTxgU3r",
        "outputId": "b6b2b997-64cb-415e-86b5-91c3c388300d",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0, 0] start first\n",
            "[1, 0] end first\n",
            "[1, 1] end second\n",
            "[1, 1] start first\n",
            "[2, 1] end first\n",
            "[2, 2] end second\n",
            "[2, 2] start first\n",
            "[3, 2] end first\n",
            "[3, 3] end second\n",
            "[3, 3] start first\n",
            "[4, 3] end first\n",
            "[4, 4] end second\n",
            "[4, 4] start first\n",
            "[5, 4] end first\n",
            "[5, 5] end second\n",
            "[5, 5] start first\n",
            "[6, 5] end first\n",
            "[6, 6] end second\n",
            "[6, 6] start first\n",
            "[7, 6] end first\n",
            "[7, 7] end second\n",
            "[7, 7] start first\n",
            "[8, 7] end first\n",
            "[8, 8] end second\n",
            "[8, 8] start first\n",
            "[9, 8] end first\n",
            "[0, 9] end second\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "secret_code = [0,1]\n",
        "mycode = [0,0]\n",
        "\n",
        "while secret_code != mycode:\n",
        "    print(mycode, \"start first\")\n",
        "    mycode [0] +=1\n",
        "    print(mycode, \"end first\")\n",
        "    if mycode [0] == 9:\n",
        "      mycode [0] = 0\n",
        "      mycode [1] +=1\n",
        "      print (mycode, \"end second\")\n",
        "    if mycode [1] == 9:\n",
        "      break\n",
        "\n",
        "\n",
        "\n",
        ""
      ],
      "metadata": {
        "id": "j8pdae7CjEG8",
        "outputId": "d12a6413-da9f-4d7d-a891-f9b9e7ece26e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 50,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0, 0] start first\n",
            "[1, 0] end first\n",
            "[1, 0] start first\n",
            "[2, 0] end first\n",
            "[2, 0] start first\n",
            "[3, 0] end first\n",
            "[3, 0] start first\n",
            "[4, 0] end first\n",
            "[4, 0] start first\n",
            "[5, 0] end first\n",
            "[5, 0] start first\n",
            "[6, 0] end first\n",
            "[6, 0] start first\n",
            "[7, 0] end first\n",
            "[7, 0] start first\n",
            "[8, 0] end first\n",
            "[8, 0] start first\n",
            "[9, 0] end first\n",
            "[0, 1] end second\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "TobXUX4wsEQV"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.7"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}